// Objective-C API for talking to github.com/netsec-ethz/scion-apps/pkg/appnet Go package.
//   gobind -lang=objc github.com/netsec-ethz/scion-apps/pkg/appnet
//
// File is generated by gobind. Do not edit.

#ifndef __Appnet_H__
#define __Appnet_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class AppnetAddressWrapper;
@class AppnetConnWrapper;
@class AppnetHostNotFoundError;
@class AppnetNetwork;
@class AppnetReadResult;
@protocol AppnetResolver;
@class AppnetResolver;

@protocol AppnetResolver <NSObject>
// skipped method Resolver.Resolve with unsupported parameter or return types

@end

/**
 * Wrapper around net.Addr to provide ObjC interoperability
 */
@interface AppnetAddressWrapper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (NSString* _Nonnull)asString;
@end

/**
 * Wrapper around snet.conn to provide ObjC interoperability
 */
@interface AppnetConnWrapper : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)close;
- (AppnetReadResult* _Nullable)read:(NSData* _Nullable)buffer;
- (BOOL)write:(NSData* _Nullable)buffer ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writeTo:(NSData* _Nullable)buffer address:(AppnetAddressWrapper* _Nullable)address ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * HostNotFoundError is returned by a Resolver when the name was not found, but
otherwise no error occurred.
 */
@interface AppnetHostNotFoundError : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull host;
- (NSString* _Nonnull)error;
@end

/**
 * Network extends the snet.Network interface by making the local IA and common
sciond connections public.
The default singleton instance of this type is obtained by the DefNetwork
function.
 */
@interface AppnetNetwork : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Network.Network with unsupported type: github.com/scionproto/scion/go/lib/snet.Network

// skipped field Network.IA with unsupported type: github.com/scionproto/scion/go/lib/addr.IA

// skipped field Network.PathQuerier with unsupported type: github.com/scionproto/scion/go/lib/snet.PathQuerier

// skipped method Network.Dial with unsupported parameter or return types

// skipped method Network.Listen with unsupported parameter or return types

@end

/**
 * More interop stuff..
 */
@interface AppnetReadResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long bytesRead;
@property (nonatomic) AppnetAddressWrapper* _Nullable source;
@property (nonatomic) NSError* _Nullable err;
@end

/**
 * metrics for path selection
 */
FOUNDATION_EXPORT const int64_t AppnetMTU;
/**
 * metrics for path selection
 */
FOUNDATION_EXPORT const int64_t AppnetPathAlgoDefault;
/**
 * metrics for path selection
 */
FOUNDATION_EXPORT const int64_t AppnetShortest;

@interface Appnet : NSObject
+ (NSString* _Nonnull) configPath;
+ (void) setConfigPath:(NSString* _Nonnull)v;

@end

FOUNDATION_EXPORT void AppnetAppnet_Empty(void);

// skipped function ChoosePathByMetric with unsupported parameter or return types


// skipped function ChoosePathInteractive with unsupported parameter or return types


/**
 * DefNetwork initialises and returns the singleton default Network.
Typically, this will not be needed for applications directly, as they can
use the simplified Dial/Listen functions provided here.
 */
FOUNDATION_EXPORT AppnetNetwork* _Nullable AppnetDefNetwork(void);

/**
 * DefaultResolver returns the default name resolver, used in ResolveUDPAddr.
It will use the following sources, in the given order of precedence, to
resolve a name:

 - /etc/hosts
 - /etc/scion/hosts
 - RAINS, if a server is configured in /etc/scion/rains.cfg.
   Disabled if built with !norains.
 */
FOUNDATION_EXPORT id<AppnetResolver> _Nullable AppnetDefaultResolver(void);

// skipped function Dial with unsupported parameter or return types


// skipped function DialAddr with unsupported parameter or return types


FOUNDATION_EXPORT AppnetConnWrapper* _Nullable AppnetDialWrapped(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

// skipped function Listen with unsupported parameter or return types


// skipped function ListenPort with unsupported parameter or return types


FOUNDATION_EXPORT AppnetConnWrapper* _Nullable AppnetListenPortWrapped(long port, NSError* _Nullable* _Nullable error);

/**
 * MangleSCIONAddr mangles a SCION address string (if it is one) so it can be
safely used in the host part of a URL.
 */
FOUNDATION_EXPORT NSString* _Nonnull AppnetMangleSCIONAddr(NSString* _Nullable address);

// skipped function QueryPaths with unsupported parameter or return types


// skipped function ResolveUDPAddr with unsupported parameter or return types


// skipped function ResolveUDPAddrAt with unsupported parameter or return types


FOUNDATION_EXPORT BOOL AppnetRunClient(NSString* _Nullable address, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void AppnetRunScion(void);

FOUNDATION_EXPORT BOOL AppnetRunServer(long port, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT void AppnetSetDaemonConfigPath(NSString* _Nullable path);

// skipped function SetDefaultPath with unsupported parameter or return types


FOUNDATION_EXPORT void AppnetSetDispatcherConfigPath(NSString* _Nullable path);

FOUNDATION_EXPORT void AppnetSetDispatcherSocket(NSString* _Nullable sock);

// skipped function SetPath with unsupported parameter or return types


FOUNDATION_EXPORT void AppnetSetSciondAddress(NSString* _Nullable addr);

/**
 * UnmangleSCIONAddr returns a SCION address that can be parsed with
with snet.ParseUDPAddr.
If the input is not a SCION address (e.g. a hostname), the address is
returned unchanged.
This parses the address, so that it can safely join host and port, with the
brackets in the right place. Yes, this means this will be parsed twice.

Assumes that address always has a port (this is enforced by the http3
roundtripper code)
 */
FOUNDATION_EXPORT NSString* _Nonnull AppnetUnmangleSCIONAddr(NSString* _Nullable address);

@class AppnetResolver;

/**
 * Resolver is the interface to resolve a host name to a SCION host address.
Currently, this is implemented for reading a hosts file and RAINS
 */
@interface AppnetResolver : NSObject <goSeqRefInterface, AppnetResolver> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped method Resolver.Resolve with unsupported parameter or return types

@end

#endif
